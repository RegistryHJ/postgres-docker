# vim:set ft=dockerfile:
FROM registryhj/ubuntu:22.04

RUN \
  set -eux; \
	groupadd -r postgres --gid=999; \
	useradd -r -g postgres --uid=999 --home-dir=/var/lib/postgresql --shell=/bin/bash postgres; \
	install --verbose --directory --owner postgres --group postgres --mode 1777 /var/lib/postgresql

RUN \
  set -ex; \
	apt update; \
  DEBIAN_FRONTEND=noninteractive \
	apt install -y --no-install-recommends \
		gnupg less; \
	rm -rf /var/lib/apt/lists/*;

ENV GOSU_VERSION=1.17

RUN \
  set -eux; \
	savedAptMark="$(apt-mark showmanual)"; \
	apt update; \
	apt install -y --no-install-recommends ca-certificates wget; \
	rm -rf /var/lib/apt/lists/*; \
	dpkgArch="$(dpkg --print-architecture | awk -F- '{ print $NF }')"; \
	wget -O /usr/local/bin/gosu "https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$dpkgArch"; \
	wget -O /usr/local/bin/gosu.asc "https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$dpkgArch.asc"; \
	export GNUPGHOME="$(mktemp -d)"; \
	gpg --batch --keyserver hkps://keys.openpgp.org --recv-keys B42F6819007F00F88E364FD4036A9C25BF357DD4; \
	gpg --batch --verify /usr/local/bin/gosu.asc /usr/local/bin/gosu; \
	gpgconf --kill all; \
	rm -rf "$GNUPGHOME" /usr/local/bin/gosu.asc; \
	apt-mark auto '.*' > /dev/null; \
	[ -z "$savedAptMark" ] || apt-mark manual $savedAptMark > /dev/null; \
	apt purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false; \
	chmod +x /usr/local/bin/gosu; \
	gosu --version; \
	gosu nobody true;

RUN \
  set -eux; \
	if [ -f /etc/dpkg/dpkg.cfg.d/docker ]; then \
		grep -q '/usr/share/locale' /etc/dpkg/dpkg.cfg.d/docker; \
		sed -ri '/\/usr\/share\/locale/d' /etc/dpkg/dpkg.cfg.d/docker; \
		! grep -q '/usr/share/locale' /etc/dpkg/dpkg.cfg.d/docker; \
	fi; \
	apt update; \
  apt install -y --no-install-recommends locales; \
  rm -rf /var/lib/apt/lists/*; \
	echo 'en_US.UTF-8 UTF-8' >> /etc/locale.gen; \
	locale-gen; \
	locale -a | grep 'en_US.utf8';

ENV LANG=en_US.utf8

RUN \
  set -eux; \
	apt update; \
	apt install -y --no-install-recommends \
		libnss-wrapper xz-utils zstd; \
	rm -rf /var/lib/apt/lists/*;

RUN mkdir /docker-entrypoint-initdb.d;

RUN \
  set -ex; \
	key='B97B0AFCAA1A47F044F244A07FCC7D46ACCC4CF8'; \
	export GNUPGHOME="$(mktemp -d)"; \
	mkdir -p /usr/local/share/keyrings/; \
	gpg --batch --keyserver keyserver.ubuntu.com --recv-keys "$key"; \
	gpg --batch --export --armor "$key" > /usr/local/share/keyrings/postgres.gpg.asc; \
	gpgconf --kill all; \
	rm -rf "$GNUPGHOME";

ENV PG_MAJOR=14
ENV PATH=$PATH:/usr/lib/postgresql/$PG_MAJOR/bin

ENV PG_VERSION=14.15-1.pgdg22.04+1

RUN set -ex; \
	export PYTHONDONTWRITEBYTECODE=1; \
	dpkgArch="$(dpkg --print-architecture)"; \
	aptRepo="[ signed-by=/usr/local/share/keyrings/postgres.gpg.asc ] http://apt.postgresql.org/pub/repos/apt/ jammy-pgdg main $PG_MAJOR"; \
	case "$dpkgArch" \
    in amd64 | arm64) \
			echo "deb $aptRepo" > /etc/apt/sources.list.d/pgdg.list; \
			apt update; \
			;; \
		*) \
			echo "deb-src $aptRepo" > /etc/apt/sources.list.d/pgdg.list; \
			savedAptMark="$(apt-mark showmanual)"; \
			tempDir="$(mktemp -d)"; \
			cd "$tempDir"; \
			apt update; \
			apt install -y --no-install-recommends dpkg-dev; \
			echo "deb [ trusted=yes ] file://$tempDir ./" > /etc/apt/sources.list.d/temp.list; \
			_update_repo() { \
				dpkg-scanpackages . > Packages; \
				apt -o Acquire::GzipIndexes=false update; \
			}; \
			_update_repo; \
			nproc="$(nproc)"; \
			export DEB_BUILD_OPTIONS="nocheck parallel=$nproc"; \
			apt build-dep -y postgresql-common pgdg-keyring; \
			apt source --compile postgresql-common pgdg-keyring; \
			_update_repo; \
			apt build-dep -y "postgresql-$PG_MAJOR=$PG_VERSION"; \
			apt source --compile "postgresql-$PG_MAJOR=$PG_VERSION"; \
			apt-mark showmanual | xargs apt-mark auto > /dev/null; \
			apt-mark manual $savedAptMark; \
			ls -lAFh; \
			_update_repo; \
			grep '^Package: ' Packages; \
			cd /; \
			;; \
	esac; \
	apt install -y --no-install-recommends postgresql-common; \
	sed -ri 's/#(create_main_cluster) .*$/\1 = false/' /etc/postgresql-common/createcluster.conf; \
	apt install -y --no-install-recommends \
		"postgresql-$PG_MAJOR=$PG_VERSION" \
	; \
	rm -rf /var/lib/apt/lists/*; \
	if [ -n "$tempDir" ]; then \
		apt purge -y --auto-remove; \
		rm -rf "$tempDir" /etc/apt/sources.list.d/temp.list; \
	fi; \
	find /usr -name '*.pyc' -type f -exec bash -c 'for pyc; do dpkg -S "$pyc" &> /dev/null || rm -vf "$pyc"; done' -- '{}' +; \
	postgres --version;

RUN \
  set -eux; \
	dpkg-divert --add --rename --divert "/usr/share/postgresql/postgresql.conf.sample.dpkg" "/usr/share/postgresql/$PG_MAJOR/postgresql.conf.sample"; \
	cp -v /usr/share/postgresql/postgresql.conf.sample.dpkg /usr/share/postgresql/postgresql.conf.sample; \
	ln -sv ../postgresql.conf.sample "/usr/share/postgresql/$PG_MAJOR/"; \
	sed -ri "s!^#?(listen_addresses)\s*=\s*\S+.*!\1 = '*'!" /usr/share/postgresql/postgresql.conf.sample; \
	grep -F "listen_addresses = '*'" /usr/share/postgresql/postgresql.conf.sample

RUN install --verbose --directory --owner postgres --group postgres --mode 3777 /var/run/postgresql;

ENV PGDATA=/var/lib/postgresql/data

RUN install --verbose --directory --owner postgres --group postgres --mode 1777 "$PGDATA";
VOLUME /var/lib/postgresql/data

RUN touch ~/.psqlrc;
RUN printf "\\\\set PROMPT1 '%%n@%%~%%R%%# '\n" >> ~/.psqlrc;

COPY docker-entrypoint.sh docker-ensure-initdb.sh /usr/local/bin/
RUN ln -sT docker-ensure-initdb.sh /usr/local/bin/docker-enforce-initdb.sh
ENTRYPOINT ["docker-entrypoint.sh"]

STOPSIGNAL SIGINT

EXPOSE 5432
CMD ["postgres"]